@Library('todo-app-shared-library') _

// Projeye Ã¶zgÃ¼ tÃ¼m konfigÃ¼rasyonlar burada tanÄ±mlanÄ±r.
def config = [
    appName: 'todo-app',
    services: [
        [name: 'user-service', dockerfile: 'user-service/Dockerfile'],
        [name: 'todo-service', dockerfile: 'todo-service/Dockerfile'],
        [name: 'frontend', dockerfile: 'frontend2/frontend/Dockerfile', context: 'frontend2/frontend/']
    ],
    unitTestServices: [
        [name: 'user-service', dockerfile: 'user-service/Dockerfile.test', context: '.'],
        [name: 'todo-service', dockerfile: 'todo-service/Dockerfile.test', context: '.']
    ],
    helmReleaseName: 'todo-app',
    helmChartPath: 'helm-charts/todo-app',
    helmDockerConfigJsonCredentialsId: 'github-registry-dockerconfig',
    dockerfilesToHadolint: [
        'user-service/Dockerfile',
        'user-service/Dockerfile.test',
        'todo-service/Dockerfile',
        'todo-service/Dockerfile.test',
        'frontend2/frontend/Dockerfile'
    ],
    hadolintIgnoreRules: ['DL3008', 'DL3009', 'DL3016', 'DL3059'],
    registry: 'ghcr.io',
    username: 'keremar',
    namespace: 'todo-app', // Bu artÄ±k staging/prod iÃ§in override edilecek
    deploymentUrl: 'local-devops-infrastructure'
]

pipeline {
    agent {
        kubernetes {
            defaultContainer 'jnlp'
            yaml com.company.jenkins.Utils.getPodTemplate()
        }
    }

    environment {
        // BUILD_NUMBER, her build iÃ§in Jenkins tarafÄ±ndan otomatik olarak artÄ±rÄ±lan bir ortam deÄŸiÅŸkenidir.
        // Docker imajlarÄ±nÄ± benzersiz bir ÅŸekilde etiketlemek iÃ§in kullanÄ±lÄ±r.
        IMAGE_TAG = "${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = 'github-registry'
    }

    stages {
        // --- AÅžAMA 1: DOÄžRULAMA (VALIDATION) ---
        // Bu aÅŸamalar, production'a daÄŸÄ±tÄ±m yapÄ±lan tag'ler DIÅžINDAKÄ° tÃ¼m branch'lerde (feature/*, master, vb.) Ã§alÄ±ÅŸÄ±r.
        // AmaÃ§, kodu build etmek, analiz etmek ve test etmektir.
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Static Code Analysis') {
            when {
                not { tag 'v*' }
            }
            steps {
                script {
                    echo "ðŸ§¹ Running Hadolint on all Dockerfiles..."
                    runHadolint(
                        dockerfiles: config.dockerfilesToHadolint,
                        ignoreRules: config.hadolintIgnoreRules
                    )
                }
            }
        }

        stage('Build Services') {
            when {
                not { tag 'v*' }
            }
            steps {
                script {
                    echo "ðŸ”¨ Building all services..."
                    def builtImages = buildAllServices(
                        services: config.services,
                        registry: config.registry,
                        username: config.username,
                        imageTag: env.IMAGE_TAG,
                        appName: config.appName
                    )
                    env.BUILT_IMAGES = builtImages.join(',')
                    echo "Built images: ${env.BUILT_IMAGES}"
                }
            }
        }

        stage('Unit Tests') {
            when {
                not { tag 'v*' }
            }
            steps {
                script {
                    echo "ðŸ§ª Running unit tests..."
                    runUnitTests(services: config.unitTestServices)
                }
            }
        }

        // --- AÅžAMA 2: ENTEGRASYON & STAGING DAÄžITIMI ---
        // Bu aÅŸamalar, sadece 'master' dalÄ±na bir kod merge edildiÄŸinde Ã§alÄ±ÅŸÄ±r.
        // Ã–nce imajlar registry'ye push'lanÄ±r, ardÄ±ndan 'staging' ortamÄ±na daÄŸÄ±tÄ±lÄ±r.
        stage('Push to Registry') {
            when {
                branch 'master'
            }
            steps {
                script {
                    echo "ðŸš€ Pushing images to registry..."
                    def images = env.BUILT_IMAGES.split(',')
                    echo "Images to push: ${images}"
                    pushToRegistry([
                        images: images,
                        credentialsId: env.REGISTRY_CREDENTIALS
                    ])
                }
            }
        }

        stage('Deploy to Staging') {
            when {
                branch 'master'
            }
            steps {
                script {
                    echo "âš¡ Deploying to Staging Environment..."
                    deployWithHelm(
                        releaseName: "${config.helmReleaseName}-staging",
                        chartPath: config.helmChartPath,
                        namespace: 'staging',
                        valuesFile: 'helm-charts/todo-app/values-staging.yaml',
                        imageTag: env.IMAGE_TAG,
                        dockerConfigJsonCredentialsId: config.helmDockerConfigJsonCredentialsId
                    )
                }
            }
        }

        // --- AÅžAMA 3: PRODUCTION'A YÃœKSELTME (PROMOTION) ---
        // Bu aÅŸama, sadece 'v' ile baÅŸlayan bir Git tag'i (Ã¶rn: v1.0.0) push'landÄ±ÄŸÄ±nda tetiklenir.
        // Build ve test adÄ±mlarÄ±nÄ± atlar, direkt olarak production daÄŸÄ±tÄ±mÄ±nÄ± yapar.
        stage('Deploy to Production') {
            when {
                tag 'v*'
            }
            steps {
                script {
                    // Production daÄŸÄ±tÄ±mÄ± Ã¶ncesi manuel onay istenir.
                    input message: "Deploy to Production Environment? (Tag: ${env.TAG_NAME})", ok: 'Deploy'
                    
                    // Git tag'indeki 'v' Ã¶nekini kaldÄ±rarak imaj tag'ini elde ediyoruz.
                    // Ã–rn: Git tag 'v1.2.3' ise, imaj tag'i '1.2.3' olur.
                    def productionImageTag = env.TAG_NAME.replace('v', '')
                    
                    echo "âš¡ Deploying tag '${productionImageTag}' to Production Environment..."
                    deployWithHelm(
                        releaseName: "${config.helmReleaseName}-prod",
                        chartPath: config.helmChartPath,
                        namespace: 'production',
                        valuesFile: 'helm-charts/todo-app/values-prod.yaml',
                        imageTag: productionImageTag,
                        dockerConfigJsonCredentialsId: config.helmDockerConfigJsonCredentialsId
                    )
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up the workspace...'
            deleteDir()
        }
        success {
            script {
                com.company.jenkins.Utils.notifyGitHub(this, 'success', 'Pipeline completed successfully!', config.deploymentUrl)
            }
        }
        failure {
            script {
                com.company.jenkins.Utils.notifyGitHub(this, 'failure', 'Pipeline failed!')
            }
        }
    }
}
